// -Xms40m -Xmx4096m -Dfile.encoding=UTF-8
import java.nio.file.*;

import org.eclipse.egit.github.core.*
import org.eclipse.egit.github.core.client.*
import org.eclipse.egit.github.core.service.*

import org.eclipse.jgit.api.*
import org.eclipse.jgit.lib.*
import org.eclipse.jgit.transport.*
import org.eclipse.jgit.errors.*

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'war'

group = 'org.koshinuke'
archivesBaseName = 'koshinuke'
version = '0.0.1'
description = 'KoshiNuke server implementation by java'

configurations.all { resolutionStrategy.cacheChangingModulesFor 14, 'days' }

repositories {
	mavenCentral()
	mavenRepo(url: 'http://download.eclipse.org/jgit/maven')
	flatDir { dirs 'lib' }
}

dependencies {
	compile "org.eclipse.jgit:org.eclipse.jgit:2.+"
	compile 'net.iharder:base64:2.3.8'
	[
		'jersey-core',
		'jersey-server',
		'jersey-servlet'
	].each { compile "com.sun.jersey:$it:1.+" }

	compile 'com.google.guava:guava:11.+'
	compile 'org.codehaus.jackson:jackson-jaxrs:1.9.+'
	compile 'com.github.spullara.mustache.java:builder:0.6.2'

	providedCompile 'org.mortbay.jetty:servlet-api:3.0.20100224'

	[
		'jetty-server',
		'jetty-servlet',
		'jetty-plus'
	].each {
		providedCompile ("org.eclipse.jetty:$it:8.+") { exclude group: 'org.eclipse.jetty.orbit' }
	}

	def g = 'org.codehaus.groovy:groovy:1.8.6'
	providedCompile g
	groovy g

	testCompile 'junit:junit:4.+'
	testCompile 'com.sun.jersey:jersey-client:1.+'
	testCompile ('com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.+') { exclude group: 'javax.servlet' }
}

sourceSets {
	main {
		java.srcDir 'src/java'
		resources.srcDir 'src/java'
	}
	bootstrap { groovy.srcDir 'src/groovy' }
	test {
		java.srcDir 'test/java'
		resources.srcDir 'test/java'
	}
}
compileBootstrapGroovy.classpath = compileJava.classpath

sourceCompatibility = 1.7
targetCompatibility = 1.7

def encoding = { it.encoding = 'UTF-8' }
tasks.withType(AbstractCompile) each { encoding it.options }
tasks.withType(GroovyCompile) each { encoding it.groovyOptions }

buildscript {
	repositories {
		mavenCentral()
		mavenRepo(url: 'http://download.eclipse.org/jgit/maven')
		flatDir { dirs 'lib' }
	}
	dependencies {
		classpath 'org.eclipse.jgit:org.eclipse.jgit:2.+'
		classpath ('org.eclipse.jetty:jetty-util:8.+') { exclude group: 'org.eclipse.jetty.orbit' }
		classpath 'com.google.guava:guava:11.+'
		classpath 'org.eclipse.mylyn.github:org.eclipse.egit.github.core:1.+'
	}
}

war {
	description "make web application archive."
	def ui = evaluationDependsOn('koshinuke')
	dependsOn ui.defaultTasks.collect { "$ui.name:$it" } << classes << compileBootstrapGroovy
	extension 'jar'
	def webapp = 'src/webapp'
	classifier = new Date().format 'yyyyMMdd_HHmmss'
	webXml file("$webapp/WEB-INF/web.xml")
	with {
		from { configurations.providedCompile.collect { it.isDirectory() ? it : zipTree(it) } }
		from(compileBootstrapJava.destinationDir) { exclude '**/Debug.class' }
		manifest { attributes 'Main-Class': 'org.koshinuke.Main' }
		into('WEB-INF/mustache/') { from "${ui.buildDir}/html/" }
		into('WEB-INF/etc') {
			exclude '*.xml'
			from file('etc')
		}
		into('static') {
			exclude '**/build/**', '**/closure-library/**'
			from "$koshinuke_path/static/"
		}
	}
}

artifacts { archives war }

class PassphraseProvider extends CredentialsProvider {
	def passphrase = ""
	PassphraseProvider() {
		def pass = System.console().readPassword("\nenter ssh passphrase: ")
		this.passphrase = "$pass"
	}
	def boolean isInteractive() {
		false
	}
	def boolean supports(CredentialItem... items) {
		true
	}
	def boolean get(URIish uri, CredentialItem... items) {
		items.each {
			if(it instanceof CredentialItem.StringType) {
				it.value = passphrase
				return true
			} else {
				throw new UnsupportedCredentialItem(uri, it.promptText);
			}
		}
	}
}

task tag << {
	def g = Git.open file('.git')
	def tag = null
	try {
		def n = "$version-$war.classifier"
		tag = g.tag() setName n setMessage "release $n" call()
		g.push().setPushTags().setCredentialsProvider new PassphraseProvider() setProgressMonitor new TextProgressMonitor() call()
	} catch(e) {
		g.tagDelete().setTags(tag?.tagName).call()
		throw e
	} finally {
		g.repository.close()
	}
}

task uploadArchives(overwrite: true, dependsOn: war) << {
	def client = new GitHubClient()
	client.setCredentials(github_username, github_password)
	def repoid = RepositoryId.create('koshinuke', 'koshinuke.java')
	def dls = new DownloadService(client)
	def d = new Download()
	d.name = war.archiveName
	dls.createDownload(repoid, d, war.archivePath)
}

task release(dependsOn:[build, tag, uploadArchives]) << { println "release fishined !!" }

///////////////////////////////////////////////////////////////////////////////////////////

eclipse {
	project { name = 'koshinuke.java' }
	classpath {
		containers = [
			'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
		]
		defaultOutputDir = file('bin')
		file {
			whenMerged {
				it.entries.find { it.path == 'src/java' }?.output = 'src/webapp/WEB-INF/classes'
			}
			withXml {
				// for tailing classpath container
				def n = it.asNode()
				def gp = [
					'GROOVY_SUPPORT',
					'GROOVY_DSL_SUPPORT'
				]
				n.children().findAll { gp.contains(it.@path) } each { n.remove(it) }

				gp.each {
					n.appendNode 'classpathentry', [kind: 'con', path: it]
				}
			}
		}
	}
}

task cloneWeb(dependsOn: clean) << {
	def dir = file("$buildDir/cloneweb/")

	FileSystem fs = FileSystems.getDefault()
	Path cp = fs.getPath(koshinuke_path, ".git")

	CloneCommand clone = Git.cloneRepository();
	clone.setURI cp.toUri().toString()
	clone.setDirectory dir
	clone.setBranch "HEAD"
	clone.setProgressMonitor new TextProgressMonitor()
	clone.call()

	project.copy {
		into 'src/webapp/WEB-INF/mustache/'
		from(dir) { include '*.html' }
	}
	project.copy {
		into 'src/webapp/'
		from(dir) { include "static/**" }
		exclude "**/.git*"
	}
}

task sym << {
	FileSystem fs = FileSystems.getDefault()
	Path cp = fs.getPath(closure_path)
	Path tg = fs.getPath("src/webapp/static/closure-library")
	Files.createSymbolicLink(tg, cp);
}

task testrepo {
	description = "make repository for testing."
	doLast {
		delete "test/repo"

		File working = new File("test/repo");
		Git g = null;
		def addFile = { path, content ->
			def newone = new File(working, path);
			newone.getParentFile().mkdirs();
			com.google.common.io.Files.write(content, newone, java.nio.charset.Charset.forName("UTF-8"));
			g.add().addFilepattern(path).call();
		}

		try {
			g = Git.init().setDirectory(working).call();

			addFile("README", "readme readme");

			g.commit().setMessage("initial commit").setAuthor("test", "test@koshinuke.org").call();

			g.checkout().setCreateBranch(true).setName("test/hoge").call();
			addFile("hoge/moge/piro.txt", "gyappa gyappa");
			g.commit().setMessage("gyawawa").setAuthor("monster1", "mostol@koshinuke.org").call();
			g.tag().setName("beta/0.0.1").setMessage("GYOWAWA!!").call();

			g.checkout().setCreateBranch(true).setName("test/moge").call();
			addFile("myomyo/muga/piyopiyo.txt", "GYAPPA GYAPPA");
			g.commit().setMessage("ぐわわ…").setAuthor("monster2", "mostol2@koshinuke.org").call();
			g.tag().setName("beta/0.0.2").setMessage("GYOWAWA!! GYOWAWA!!").call();


			g.checkout().setName("master").call();
			addFile("moge/mmooggee.txt", "mogemoge piropiro");
			addFile("moge/piro/ppp.txt", "33lladkkiec");
			g.commit().setMessage("i'm not evil.").setAuthor("taichi", "taichi@koshinuke.org").call();
			g.tag().setName("0.1.0").setMessage("TAG tag tag....").call();

			g.checkout().setCreateBranch(true).setName("branchbranch").call();
			addFile("hoge/piyo/piyo.txt", "ぎゃっぱぎゃっぱ");
			addFile("hoge/piyo/mogemoge.conf", "%% \"-+''");
			g.commit().setMessage("すげぇの足した。1+1 = 2").setAuthor("one_monster", "one@koshinuke.org").call();
		} finally {
			g.getRepository().close();
		}
	}
}

task wrapper(type: Wrapper) {
	jarFile file('wrapper/gradle-wrapper.jar')
	scriptFile file('gradle')
}

task passwd {
	description = "login.properties Utility."
	doLast {
		println "taichi: " + org.eclipse.jetty.util.security.Credential.MD5.digest("taichipass")
		println "lanius: " + org.eclipse.jetty.util.security.Credential.Crypt.crypt("lanius", "laniuspass")
	}
}
