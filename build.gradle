// -Xms40m -Xmx4096m -Dfile.encoding=UTF-8
import java.io.File;
import java.nio.file.*;

import org.eclipse.jgit.api.*;
import org.eclipse.jgit.api.CreateBranchCommand.SetupUpstreamMode;
import org.eclipse.jgit.lib.*;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'

dependsOnChildren()

configurations.all { resolutionStrategy.cacheChangingModulesFor 14, 'days' }

repositories {
	mavenCentral()
	mavenRepo(url: 'http://download.eclipse.org/jgit/maven')
	flatDir { dirs 'lib' }
}

dependencies {
	compile "org.eclipse.jgit:org.eclipse.jgit:1.+"
	compile 'net.iharder:base64:2.3.8'
	[
		'jersey-core',
		'jersey-server',
		'jersey-servlet'
	].each { compile "com.sun.jersey:$it:1.+" }

	compile 'com.google.guava:guava:11.+'
	compile 'org.codehaus.jackson:jackson-jaxrs:1.9.+'
	compile 'com.github.spullara.mustache.java:builder:0.6.2'

	providedCompile 'org.mortbay.jetty:servlet-api:3.0.20100224'

	[
		'jetty-server',
		'jetty-servlet',
		'jetty-plus'
	].each {
		compile ("org.eclipse.jetty:$it:8.+") { exclude group: 'org.eclipse.jetty.orbit' }
	}

	testCompile 'junit:junit:4.+'
	testCompile 'com.sun.jersey:jersey-client:1.+'
	testCompile ('com.sun.jersey.jersey-test-framework:jersey-test-framework-core:1.+') { exclude group: 'javax.servlet' }
}

sourceSets {
	main {
		java.srcDir 'src/java'
		resources.srcDir 'src/java'
	}
	bootstrap { java.srcDir "src/bootstrap" }
	test {
		java.srcDir 'test/java'
		resources.srcDir 'test/java'
	}
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

tasks.withType(AbstractCompile).each {
	it.options.encoding = "UTF-8"
}

eclipse {
	project { name = 'koshinuke.java' }
	classpath {
		containers = [
			'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
		]
		defaultOutputDir = file('bin')
		file {
			whenMerged {
				it.entries.find { it.path == 'src/java' }?.output = 'src/webapp/WEB-INF/classes'
			}
		}
	}
}

buildscript {
	repositories {
		mavenCentral()
		mavenRepo(url: 'http://download.eclipse.org/jgit/maven')
		flatDir { dirs 'lib' }
	}
	dependencies {
		classpath 'org.eclipse.jgit:org.eclipse.jgit:1.2.+'
		classpath 'org.eclipse.jetty:jetty-http:8.0.+'
		classpath 'com.google.guava:guava:11.+'
	}
}

task cloneWeb(dependsOn: clean) << {
	def dir = file("$buildDir/cloneweb/")

	FileSystem fs = FileSystems.getDefault()
	Path cp = fs.getPath(koshinuke_path, ".git")

	CloneCommand clone = Git.cloneRepository();
	clone.setURI cp.toUri().toString()
	clone.setDirectory dir
	clone.setBranch "HEAD"
	clone.setProgressMonitor new TextProgressMonitor()
	clone.call()

	project.copy {
		into 'src/webapp/WEB-INF/mustache/'
		from(dir) { include '*.html' }
	}
	project.copy {
		into 'src/webapp/'
		from(dir) { include "static/**" }
		exclude "**/.git*"
	}
}

task makewar(dependsOn: classes) {
	description = "make executable war."
	doLast {
		// UIプロジェクトのbuildを実行
		def uiproject = project("../koshinuke")
		println uiproject.defaultTasks.collect { uiproject[it] } + project.classes
		// 必要なリソースをビルドディレクトリにコピー
		project.war {
			webAppDirName = "src/webapp"
		}
	}
}

task sym << {
	FileSystem fs = FileSystems.getDefault()
	Path cp = fs.getPath(closure_path)
	Path tg = fs.getPath("src/webapp/static/closure-library")
	Files.createSymbolicLink(tg, cp);
}

task testrepo {
	description = "make repository for testing."
	doLast {
		delete "test/repo"

		File working = new File("test/repo");
		Git g = null;
		def addFile = { path, content ->
			def newone = new File(working, path);
			newone.getParentFile().mkdirs();
			com.google.common.io.Files.write(content, newone, java.nio.charset.Charset.forName("UTF-8"));
			g.add().addFilepattern(path).call();
		}

		try {
			g = Git.init().setDirectory(working).call();

			addFile("README", "readme readme");

			g.commit().setMessage("initial commit").setAuthor("test", "test@koshinuke.org").call();

			g.checkout().setCreateBranch(true).setName("test/hoge").call();
			addFile("hoge/moge/piro.txt", "gyappa gyappa");
			g.commit().setMessage("gyawawa").setAuthor("monster1", "mostol@koshinuke.org").call();
			g.tag().setName("beta/0.0.1").setMessage("GYOWAWA!!").call();

			g.checkout().setCreateBranch(true).setName("test/moge").call();
			addFile("myomyo/muga/piyopiyo.txt", "GYAPPA GYAPPA");
			g.commit().setMessage("ぐわわ…").setAuthor("monster2", "mostol2@koshinuke.org").call();
			g.tag().setName("beta/0.0.2").setMessage("GYOWAWA!! GYOWAWA!!").call();


			g.checkout().setName("master").call();
			addFile("moge/mmooggee.txt", "mogemoge piropiro");
			addFile("moge/piro/ppp.txt", "33lladkkiec");
			g.commit().setMessage("i'm not evil.").setAuthor("taichi", "taichi@koshinuke.org").call();
			g.tag().setName("0.1.0").setMessage("TAG tag tag....").call();

			g.checkout().setCreateBranch(true).setName("branchbranch").call();
			addFile("hoge/piyo/piyo.txt", "ぎゃっぱぎゃっぱ");
			addFile("hoge/piyo/mogemoge.conf", "%% \"-+''");
			g.commit().setMessage("すげぇの足した。1+1 = 2").setAuthor("one_monster", "one@koshinuke.org").call();
		} finally {
			g.getRepository().close();
		}
	}
}

task passwd {
	description = "login.properties Utility."
	doLast {
		println "taichi: " + org.eclipse.jetty.http.security.Credential.MD5.digest("taichipass")
		println "lanius: " + org.eclipse.jetty.http.security.Credential.Crypt.crypt("lanius", "laniuspass")
	}
}
